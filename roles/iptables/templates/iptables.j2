*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# ------------------- Anti-DDoS rules ------------------- #

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset -m comment --comment "Limit connections per source IP from hosts that have more than 80 established connections"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT -m comment --comment "Limit incoming TCP RST packets"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags RST RST                                      -j DROP   -m comment --comment "Limit incoming TCP RST packets"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT -m comment --comment "Limit new TCP connections that client can establish per second per source IP"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW                                        -j DROP   -m comment --comment "Limit new TCP connections that client can establish per second per source IP"

-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --set                                       -m comment --comment "SSH brute-force protection"
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP -m comment --comment "SSH brute-force protection"

-N port-scanning                                                                                                                                           -m comment --comment "Protection against port scanning"
-A port-scanning -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN -m comment --comment "Protection against port scanning"
-A port-scanning -i {{ ansible_facts['default_ipv4']['interface'] }}                                                                             -j DROP   -m comment --comment "Protection against port scanning"

# ------------------- Basic rules ------------------- #

-A OUTPUT -o lo                  -j ACCEPT -m comment --comment "Only accept looback traffic originating from localhost"
-A INPUT  -i lo                  -j ACCEPT -m comment --comment "Only accept looback traffic originating from localhost"
-A INPUT  ! -i lo -s 127.0.0.0/8 -j REJECT -m comment --comment "Only accept looback traffic originating from localhost"

# e.g., allow 'curl http://127.0.0.1:9000'; looback traffic originating from localhost also must also accepted
-A OUTPUT -o docker0 -j ACCEPT -m comment --comment "Allow connect from localhost to docker service exposed to localhost"
-A INPUT  -i docker0 -j ACCEPT -m comment --comment "Allow connect from localhost to docker service exposed to localhost"

-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --dport {{ ssh_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming SSH on custom port"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --sport {{ ssh_port }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow incoming SSH on custom port"

-A OUTPUT -p icmp -o {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate ICMP requests"
-A INPUT  -p icmp -i {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate ICMP requests"

-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 53  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 53  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A OUTPUT -p udp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 53  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"
-A INPUT  -p udp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 53  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate DNS requests"

-A OUTPUT -p udp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 123 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate NTP requests"
-A INPUT  -p udp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 123 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate NTP requests"

-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 22  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate SSH requests on standart port"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 22  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate SSH requests on standart port"

# to be able server to update itself
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 80  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 80  -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"
-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --sport 443 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow server to initiate HTTP/S requests"

{% if ansible_facts['system_vendor'] == "Hetzner" %}
# ------------------- Hetzner specific rules ------------------- #

# private IP 172.31.1.1 is a default gateway of Hetzner server's public network interface
-A INPUT  -p udp -s 172.31.1.1 --sport 67 -d {{ ansible_facts['default_ipv4']['address'] }} --dport 68 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "dhclient"
-A OUTPUT -p udp -s {{ ansible_facts['default_ipv4']['address'] }} --sport 68 -d 172.31.1.1 --dport 67 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "dhclient"

# IP 169.254.169.254 is used by server to discover metadata about itself (https://docs.hetzner.cloud/ -> Server Metadata)
-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d 169.254.169.254 --dport 80 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow kubelet to discover server metadata"
-A INPUT  -p tcp -s 169.254.169.254 --sport 80 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow kubelet to discover server metadata"

{% endif %}
{% if k8s_cluster_variables.stat.exists %}
{% if 'kube-master' in group_names %}
# ------------------- Kubernetes master rules ------------------- #

-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --dport 6443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests to kube-apiserver"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --sport 6443 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow incoming requests to kube-apiserver"

-A OUTPUT -p tcp -s {{ item.1.ip }}               -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate requests"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 179   -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming BGP requests from kube-masters and kube-nodes to calico-node"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 6443  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests to kube-apiserver"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 6789  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests to cephfs provisioner monitor"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 10250 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests from kube-nodes to kubelet"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 10257 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests to kube-controller-manager"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 10259 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests to kube-scheduler"
-A INPUT  -p tcp -d {{ item.1.ip }}               -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow traffic that was initiated from server"

# from 10.233.0.3 to 10.233.0.3:53 (2nd IP-address of kube-ipvs0 interface)
-A OUTPUT -p tcp -s {{ kube_service_addresses }} -d {{ kube_service_addresses }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"
-A INPUT  -p tcp -s {{ kube_service_addresses }} -d {{ kube_service_addresses }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"
-A INPUT  -p tcp -s {{ kube_service_addresses }} --sport 53 -d {{ kube_service_addresses }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"

# from 10.233.0.1 to 10.233.0.1:443 (calico-node, 1st IP-address of kube-ipvs0 interface)
# e.g., from 10.233.18.239 to 10.233.18.239:443 (kube-apiserver, 3rd IP-address of kube-ipvs0 interface)
-A OUTPUT -p tcp -s {{ kube_service_addresses }}             -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-apiserver"
-A INPUT  -p tcp -d {{ kube_service_addresses }} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-apiserver"
-A INPUT  -p tcp -d {{ kube_service_addresses }}             -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-apiserver"

-A OUTPUT -p tcp -s {{ kube_pods_subnet }} -d {{ kube_pods_subnet }} --dport 8000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow health check from kubernetes-dashboard to kubernetes-metrics-scraper"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} -d {{ kube_pods_subnet }} --dport 8000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow health check from kubernetes-dashboard to kubernetes-metrics-scraper"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 8000 -d {{ kube_pods_subnet }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow health check from kubernetes-dashboard to kubernetes-metrics-scraper"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 9808 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 9808 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 9808 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"

-A OUTPUT -p udp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p udp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p udp -s {{ nodelocaldns_ip }} --sport 53 -d {{ nodelocaldns_ip }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"

-A OUTPUT -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport {{ nodelocaldns_health_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport {{ nodelocaldns_health_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} --sport {{ nodelocaldns_health_port }} -d {{ nodelocaldns_ip }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"

{% endif %}
{% if 'etcd' in group_names %}
# ------------------- etcd rules ------------------- #

-A OUTPUT -p tcp -s {{ item.1.ip }}              -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate requests"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 2379 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow client connections from kube-masters to etcd"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 2380 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow peer connections from etcd to etcd"
-A INPUT  -p tcp -d {{ item.1.ip }}              -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow traffic that was initiated from server"

{% endif %}
{% if 'kube-node' in group_names %}
# ------------------- Kubernetes node rules ------------------- #

-A INPUT  -p tcp -i {{ ansible_facts['default_ipv4']['interface'] }} --dport 30000:32767 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow inbound traffic to NodePort Services"
-A OUTPUT -p tcp -o {{ ansible_facts['default_ipv4']['interface'] }} --sport 30000:32767 -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow inbound traffic to NodePort Services"

-A OUTPUT -p tcp -s {{ item.1.ip }}               -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow server to initiate requests"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 179   -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming BGP requests from kube-masters and kube-nodes to calico-node"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 8081  -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nginx-proxy"
-A INPUT  -p tcp -d {{ item.1.ip }} --dport 10250 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow incoming requests from kube-nodes to kubelet"
-A INPUT  -p tcp -d {{ item.1.ip }}               -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow traffic that was initiated from server"

# from 10.233.0.3 to 10.233.0.3:53 (2nd IP-address of kube-ipvs0 interface)
-A OUTPUT -p tcp -s {{ kube_service_addresses }} -d {{ kube_service_addresses }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"
-A INPUT  -p tcp -s {{ kube_service_addresses }} -d {{ kube_service_addresses }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"
-A INPUT  -p tcp -s {{ kube_service_addresses }} --sport 53 -d {{ kube_service_addresses }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow DNS requests from node-cache to coredns"

# from 10.233.0.1 to 10.233.0.1:443 (calico-node and kube-controller, 1st IP-address of kube-ipvs0 interface)
# e.g., from 10.233.18.239 to 10.233.18.239:443 (kube-apiserver, 3rd IP-address of kube-ipvs0 interface)
-A OUTPUT -p tcp -s {{ kube_service_addresses }}             -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-controller"
-A INPUT  -p tcp -d {{ kube_service_addresses }} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-controller"
-A INPUT  -p tcp -d {{ kube_service_addresses }}             -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from calico-node and kube-controller"

-A OUTPUT -p tcp -s {{ kube_pods_subnet }} -d {{ item.1.ip }} --dport 10250 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from kube-pods to kubelet"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} -d {{ item.1.ip }} --dport 10250 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from kube-pods to kubelet"
-A INPUT  -p tcp -s {{ item.1.ip }} --sport 10250 -d {{ kube_pods_subnet }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from kube-pods to kubelet"

-A OUTPUT -p tcp -s {{ kube_pods_subnet }}                   -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from coredns"
-A INPUT  -p tcp -d {{ kube_service_addresses }} --dport 443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from coredns"
-A INPUT  -p tcp -d {{ kube_pods_subnet }}                   -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from coredns"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for coredns"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8080 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for coredns"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 8080 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe for coredns"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8181 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow readinessProbe for coredns"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8181 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow readinessProbe for coredns"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 8181 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow readinessProbe for coredns"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-dashboard; allow livenessProbe and readinessProbe for metrics-server"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8443 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-dashboard; allow livenessProbe and readinessProbe for metrics-server"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 8443 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-dashboard; allow livenessProbe and readinessProbe for metrics-server"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-metrics-scraper"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 8000 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-metrics-scraper"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 8000 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe for kubernetes-metrics-scraper"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 9808 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 9808 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 9808 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe for hcloud-csi"

-A OUTPUT -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 10254 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for ingress-nginx-controller"
-A INPUT  -p tcp -s {{ ansible_facts['default_ipv4']['address'] }} -d {{ kube_pods_subnet }} --dport 10254 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for ingress-nginx-controller"
-A INPUT  -p tcp -s {{ kube_pods_subnet }} --sport 10254 -d {{ ansible_facts['default_ipv4']['address'] }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for ingress-nginx-controller"

-A OUTPUT -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} --sport 53 -d {{ nodelocaldns_ip }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"

-A OUTPUT -p udp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p udp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport 53 -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"
-A INPUT  -p udp -s {{ nodelocaldns_ip }} --sport 53 -d {{ nodelocaldns_ip }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow requests from node-cache to nodelocaldns"

-A OUTPUT -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport {{ nodelocaldns_health_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} -d {{ nodelocaldns_ip }} --dport {{ nodelocaldns_health_port }} -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"
-A INPUT  -p tcp -s {{ nodelocaldns_ip }} --sport {{ nodelocaldns_health_port }} -d {{ nodelocaldns_ip }} -m conntrack --ctstate ESTABLISHED     -j ACCEPT -m comment --comment "Allow livenessProbe and readinessProbe for nodelocaldns"

{% endif %}
{% endif %}
# ------------------- Basic rules ------------------- #

# Log Blocked Traffic
-A INPUT   -m limit --limit 3/min -j LOG --log-prefix "iptables_INPUT_denied: "   --log-level 4
-A FORWARD -m limit --limit 3/min -j LOG --log-prefix "iptables_FORWARD_denied: " --log-level 4
-A OUTPUT  -m limit --limit 3/min -j LOG --log-prefix "iptables_OUTPUT_denied: "  --log-level 4

COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# ------------------- Anti-DDoS rules ------------------- #

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -m conntrack --ctstate INVALID -j DROP -m comment --comment "Drop invalid packets"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp ! --syn -m conntrack --ctstate NEW -j DROP -m comment --comment "Drop TCP packets that are new and are not SYN"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP -m comment --comment "Drop SYN packets with suspicious MSS value"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,SYN FIN,SYN              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags SYN,RST SYN,RST              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,RST FIN,RST              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags FIN,ACK FIN                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,URG URG                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,FIN FIN                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ACK,PSH PSH                  -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL ALL                      -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL NONE                     -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL FIN,PSH,URG              -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL SYN,FIN,PSH,URG          -j DROP -m comment --comment "Block packets with bogus TCP flags"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG      -j DROP -m comment --comment "Block packets with bogus TCP flags"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 224.0.0.0/3     -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
{% if ansible_facts['system_vendor'] == "Hetzner" %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 169.254.169.254 -j ACCEPT -m comment --comment "Allow packets from Hetzner Cloud API"
{% endif %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 169.254.0.0/16  -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
{% if ansible_facts['system_vendor'] == "Hetzner" %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 172.31.1.1      -j ACCEPT -m comment --comment "Allow packets from default gateway of Hetzner server's public network interface"
{% endif %}
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 172.16.0.0/12   -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.0.2.0/24    -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.168.0.0/16  -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 10.0.0.0/8      -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 240.0.0.0/5     -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"
-A PREROUTING -s 127.0.0.0/8 ! -i lo                                                 -j DROP   -m comment --comment "Block packets from private subnets (Spoofing)"

-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -f -j DROP -m comment --comment "Drop fragmented packets in all chains"

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
