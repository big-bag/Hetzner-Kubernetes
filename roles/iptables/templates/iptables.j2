*filter
:INPUT DROP [0:0]
:FORWARD DROP [0:0]
:OUTPUT DROP [0:0]

# ------------------- Anti-DDoS rules ------------------- #

# Limit connections per source IP from hosts that have more than 80 established connections
-A INPUT -p tcp -m connlimit --connlimit-above 80 -j REJECT --reject-with tcp-reset

# Limit incoming TCP RST packets
-A INPUT -p tcp --tcp-flags RST RST -m limit --limit 2/s --limit-burst 2 -j ACCEPT
-A INPUT -p tcp --tcp-flags RST RST -j DROP

# Limit new TCP connections that client can establish per second per source IP
-A INPUT -p tcp -m conntrack --ctstate NEW -m limit --limit 60/s --limit-burst 20 -j ACCEPT
-A INPUT -p tcp -m conntrack --ctstate NEW -j DROP

# SSH brute-force protection
-A INPUT -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --set
-A INPUT -p tcp --dport {{ ssh_port }} -m conntrack --ctstate NEW -m recent --update --seconds 60 --hitcount 10 -j DROP

# Protection against port scanning
-N port-scanning
-A port-scanning -p tcp --tcp-flags SYN,ACK,FIN,RST RST -m limit --limit 1/s --limit-burst 2 -j RETURN
-A port-scanning -j DROP

# ------------------- Basic rules ------------------- #

# Only accept looback traffic originating from localhost
-A OUTPUT -o lo -j ACCEPT
-A INPUT -i lo -j ACCEPT
-A INPUT ! -i lo -s 127.0.0.0/8 -j REJECT

# Allow connect from localhost to docker service exposed to localhost (like 'curl http://127.0.0.1:9000'; looback traffic originating from localhost also must also accepted )
-A OUTPUT -o docker0 -j ACCEPT
-A INPUT -i docker0 -j ACCEPT

# Allow incoming SSH (on custom port)
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW,ESTABLISHED --dport {{ ssh_port }} -j ACCEPT
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate ESTABLISHED --sport {{ ssh_port }} -j ACCEPT

# Allow server to initiate ICMP requests
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p icmp -m conntrack --ctstate NEW,ESTABLISHED -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p icmp -m conntrack --ctstate ESTABLISHED -j ACCEPT

# Allow server to initiate DNS requests
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW,ESTABLISHED --dport 53 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate ESTABLISHED --sport 53 -j ACCEPT
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p udp -m conntrack --ctstate NEW,ESTABLISHED --dport 53 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p udp -m conntrack --ctstate ESTABLISHED --sport 53 -j ACCEPT

# Allow server to initiate NTP requests
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p udp -m conntrack --ctstate NEW,ESTABLISHED --dport 123 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p udp -m conntrack --ctstate ESTABLISHED --sport 123 -j ACCEPT

# Allow server to initiate SSH requests (on standart port)
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW,ESTABLISHED --dport 22 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate ESTABLISHED --sport 22 -j ACCEPT

# Allow server to initiate HTTP/S requests (to be able to update itself)
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW,ESTABLISHED --dport 80 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate ESTABLISHED --sport 80 -j ACCEPT
-A OUTPUT -o {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate NEW,ESTABLISHED --dport 443 -j ACCEPT
-A INPUT -i {{ ansible_facts['default_ipv4']['interface'] }} -p tcp -m conntrack --ctstate ESTABLISHED --sport 443 -j ACCEPT

# Log Blocked Traffic
-A INPUT -m limit --limit 3/min -j LOG --log-prefix "iptables_INPUT_denied: " --log-level 4
-A FORWARD -m limit --limit 3/min -j LOG --log-prefix "iptables_FORWARD_denied: " --log-level 4
-A OUTPUT -m limit --limit 3/min -j LOG --log-prefix "iptables_OUTPUT_denied: " --log-level 4

COMMIT

*mangle
:PREROUTING ACCEPT [0:0]
:INPUT ACCEPT [0:0]
:FORWARD ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]

# ------------------- Anti-DDoS rules ------------------- #

# Drop invalid packets
-A PREROUTING -m conntrack --ctstate INVALID -j DROP

# Drop TCP packets that are new and are not SYN
-A PREROUTING -p tcp ! --syn -m conntrack --ctstate NEW -j DROP

# Drop SYN packets with suspicious MSS value
-A PREROUTING -p tcp -m conntrack --ctstate NEW -m tcpmss ! --mss 536:65535 -j DROP

# Block packets with bogus TCP flags
-A PREROUTING -p tcp --tcp-flags FIN,SYN,RST,PSH,ACK,URG NONE -j DROP 
-A PREROUTING -p tcp --tcp-flags FIN,SYN FIN,SYN -j DROP 
-A PREROUTING -p tcp --tcp-flags SYN,RST SYN,RST -j DROP 
-A PREROUTING -p tcp --tcp-flags FIN,RST FIN,RST -j DROP 
-A PREROUTING -p tcp --tcp-flags FIN,ACK FIN -j DROP 
-A PREROUTING -p tcp --tcp-flags ACK,URG URG -j DROP 
-A PREROUTING -p tcp --tcp-flags ACK,FIN FIN -j DROP 
-A PREROUTING -p tcp --tcp-flags ACK,PSH PSH -j DROP 
-A PREROUTING -p tcp --tcp-flags ALL ALL -j DROP 
-A PREROUTING -p tcp --tcp-flags ALL NONE -j DROP 
-A PREROUTING -p tcp --tcp-flags ALL FIN,PSH,URG -j DROP 
-A PREROUTING -p tcp --tcp-flags ALL SYN,FIN,PSH,URG -j DROP 
-A PREROUTING -p tcp --tcp-flags ALL SYN,RST,ACK,FIN,URG -j DROP

# Block packets from private subnets (Spoofing)
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 224.0.0.0/3 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 169.254.0.0/16 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 172.16.0.0/12 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.0.2.0/24 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 192.168.0.0/16 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 10.0.0.0/8 -j DROP 
-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 240.0.0.0/5 -j DROP 
#-A PREROUTING -i {{ ansible_facts['default_ipv4']['interface'] }} -s 127.0.0.0/8 ! -i lo -j DROP

# Drop fragmented packets in all chains
-A PREROUTING -f -j DROP

COMMIT

*nat
:PREROUTING ACCEPT [0:0]
:POSTROUTING ACCEPT [0:0]
:OUTPUT ACCEPT [0:0]
COMMIT
