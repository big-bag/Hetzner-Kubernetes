---
# ------------------- ssh keys ------------------- #
- name: generate an openssh keypair
  community.crypto.openssh_keypair:
    path: id_rsa

# ------------------- server ------------------- #
- name: create a ssh key
  hetzner.hcloud.hcloud_ssh_key:
    api_token: "{{ vault_hcloud_token }}"
    name: "{{ users | json_query('[*].name') | first }}"
    public_key: "{{ lookup('file', '{{ playbook_dir }}/id_rsa.pub') }}"

- name: create a network
  hetzner.hcloud.hcloud_network:
    api_token: "{{ vault_hcloud_token }}"
    name: network-1
    ip_range: "{{ network }}"

- name: create a subnetwork
  hetzner.hcloud.hcloud_subnetwork:
    api_token: "{{ vault_hcloud_token }}"
    network: network-1
    ip_range: "{{ subnetwork }}"
    network_zone: eu-central
    type: cloud

- name: create a server with ssh key
  hetzner.hcloud.hcloud_server:
    api_token: "{{ vault_hcloud_token }}"
    name: "{{ item.name }}"
    server_type: "{{ item.type }}"
    image: "{{ item.image }}"
    location: hel1
    ssh_keys: [ "{{ users | json_query('[*].name') | first }}" ]
  loop: "{{ servers }}"
  register: server

- name: create a server network and specify the ip address
  hetzner.hcloud.hcloud_server_network:
    api_token: "{{ vault_hcloud_token }}"
    network: network-1
    server: "{{ item.name }}"
    ip: "{{ item.ip }}"
  loop: "{{ servers }}"

# ------------------- load balancer ------------------- #
- name: create a load balancer
  hetzner.hcloud.hcloud_load_balancer:
    api_token: "{{ vault_hcloud_token }}"
    name: "{{ item.name }}"
    location: hel1
    load_balancer_type: lb11
  loop: "{{ load_balancers }}"

- name: create a load balancer network and specify the ip address
  hetzner.hcloud.hcloud_load_balancer_network:
    api_token: "{{ vault_hcloud_token }}"
    load_balancer: "{{ item.name }}"
    network: network-1
    ip: "{{ item.ip }}"
  loop: "{{ load_balancers }}"

- name: add host to group 'kube-node'
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    groups: kube-node
  when: "'kube-node' in {{ item.group }}"
  loop: "{{ servers }}"
  changed_when: false

- name: create a server load balancer target
  hetzner.hcloud.hcloud_load_balancer_target:
    api_token: "{{ vault_hcloud_token }}"
    load_balancer: "{{ item.0.name }}"
    type: server
    server: "{{ item.1 }}"
    use_private_ip: yes
  loop: "{{ load_balancers|product(groups['kube-node'])|list }}"

- name: create a load balancer http service (1/2)
  hetzner.hcloud.hcloud_load_balancer_service:
    api_token: "{{ vault_hcloud_token }}"
    load_balancer: "{{ item.name }}"
    protocol: http
    listen_port: 80
  loop: "{{ load_balancers }}"

- name: create a load balancer http service (2/2)
  hetzner.hcloud.hcloud_load_balancer_service:
    api_token: "{{ vault_hcloud_token }}"
    load_balancer: "{{ item.name }}"
    listen_port: 80
    health_check:
      http:
        path: "/healthz"
  loop: "{{ load_balancers }}"
  changed_when: false

- name: create a load balancer https service
  hetzner.hcloud.hcloud_load_balancer_service:
    api_token: "{{ vault_hcloud_token }}"
    load_balancer: "{{ item.name }}"
    protocol: tcp
    listen_port: 443
    destination_port: 443
  loop: "{{ load_balancers }}"

# ------------------- cloudflare ------------------- #
- name: gather hcloud load balancer infos
  hetzner.hcloud.hcloud_load_balancer_info:
    api_token: "{{ vault_hcloud_token }}"
  register: output

- name: gather hcloud load balancer ipv4 address
  ansible.builtin.set_fact:
    load_balancer_ipv4: "{{ output['hcloud_load_balancer_info'][0]['ipv4_address'] }}"

- name: create a record on cloudflare to point to hcloud load balancer
  community.general.cloudflare_dns:
    api_token: "{{ vault_cloudflare_api_token }}"
    zone: "{{ vault_domain }}"
    type: A
    value: "{{ load_balancer_ipv4 }}"

# ------------------- folders and files ------------------- #
- name: create folders for inventory and group variables
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
  loop:
    - inventory
    - group_vars/hcloud

- name: create a hetzner cloud dynamic inventory file
  ansible.builtin.blockinfile:
    path: inventory/hcloud.yml
    block: |
      ---
      plugin: hcloud
      token: {{ vault_hcloud_token }}
    create: yes

- name: create a symbolic links from host vars to group vars
  ansible.builtin.file:
    src: "{{ playbook_dir }}/host_vars/localhost/{{ item }}.yml"
    dest: "{{ playbook_dir }}/group_vars/hcloud/{{ item }}.yml"
    state: link
  loop:
    - vars
    - vault
