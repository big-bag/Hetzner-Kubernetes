---
- name: clone a kubespray repo
  ansible.builtin.git:
    repo: https://github.com/kubernetes-sigs/kubespray.git
    dest: "{{ playbook_dir }}/../kubespray"

- name: install dependencies
  ansible.builtin.pip:
    requirements: "{{ playbook_dir }}/../kubespray/requirements.txt"
    executable: pip3

- name: build inventory (1/2)
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../kubespray/inventory/sample/"
    dest: "{{ playbook_dir }}/../kubespray/inventory/mycluster"
    remote_src: yes
    force: no

- name: build inventory (2/2)
  ansible.builtin.template:
    src: inventory.ini.j2
    dest: "{{ playbook_dir }}/../kubespray/inventory/mycluster/inventory.ini"
  register: variables

- name: create dynamic inventory for hetzner cloud
  ansible.builtin.blockinfile:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/hcloud.yml"
    block: |
      ---
      plugin: hcloud
      token: {{ vault_hcloud_token }}
    create: yes

- name: configure iptables backend for calico cni
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-net-calico.yml"
    regexp: '^# calico_iptables_backend: "Legacy"$'
    replace: 'calico_iptables_backend: "NFT"'
  register: variables

- name: configure downloading kubectl onto localhost
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml"
    regexp: '^# kubectl_localhost: false$'
    replace: 'kubectl_localhost: true'
  register: variables

- name: configure copying of kubeconfig on localhost
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml"
    regexp: '^# kubeconfig_localhost: false$'
    replace: 'kubeconfig_localhost: true'
  register: variables

- name: gather facts from hcloud servers
  ansible.builtin.setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['hcloud'] }}"

- name: add host to group 'kube-master'
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    groups: kube-master
  when: "'kube-master' in {{ item.group }}"
  loop: "{{ servers }}"
  changed_when: false

- name: set list of the ip addresses of the controller nodes (1/2)
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml"
    regexp: 'supplementary_addresses_in_ssl_keys: \[.*\]'
    replace: "supplementary_addresses_in_ssl_keys: [{{ groups['kube-master'] | map('extract', hostvars, ['ipv4']) | join(', ') }}]"
  register: variables

- name: set list of the ip addresses of the controller nodes (2/2)
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/k8s-cluster.yml"
    regexp: '# (supplementary_addresses_in_ssl_keys: \[.*\])'
    replace: '\1'
  register: variables

- name: enable the metrics server
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/group_vars/k8s-cluster/addons.yml"
    regexp: '^metrics_server_enabled: false$'
    replace: 'metrics_server_enabled: true'
  register: variables

- name: start the deployment
  ansible.builtin.command:
    argv:
      - ansible-playbook
      - -i
      - "{{ playbook_dir }}/../kubespray/inventory/mycluster/hcloud.yml"
      - -i
      - "{{ playbook_dir }}/../kubespray/inventory/mycluster/inventory.ini"
      - "{{ playbook_dir }}/../kubespray/cluster.yml"
      - --become
  environment:
    ANSIBLE_LIBRARY: /usr/local/lib/python3.8/dist-packages/ansible/modules/
    ANSIBLE_MODULE_UTILS: /usr/local/lib/python3.8/dist-packages/ansible/module_utils/
  when: variables.changed

- name: check installed version
  shell: kubectl version --client | awk -F "GitVersion:\"" '{print$2}' | awk -F "\"" '{print$1}'
  ignore_errors: true
  register: current_version
  changed_when: false

- name: if the tool isn't installed, then set the version to zero; otherwise, set the current version
  ansible.builtin.set_fact:
    current_version: "{% if 'not found' in current_version.stderr %}0{% else %}{{ current_version.stdout }}{% endif %}"

- name: check stable version
  shell: curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt
  register: stable_version
  changed_when: false

- name: download latest version of kubectl
  ansible.builtin.get_url:
    url: "https://storage.googleapis.com/kubernetes-release/release/{{ stable_version.stdout }}/bin/linux/amd64/kubectl"
    dest: /usr/local/bin/kubectl
    mode: '0755'
    force: yes
  become: yes
  when: "'{{ stable_version.stdout }}' != '{{ current_version }}'"

- name: change controller host name to use the controller's public ip
  ansible.builtin.replace:
    path: "{{ playbook_dir }}/../kubespray/inventory/mycluster/artifacts/admin.conf"
    regexp: 'https:\/\/.*:6443'
    replace: "https://{{ hostvars[groups['kube-master'][0]]['ipv4'] }}:6443"

- name: create a directory for kube configs
  ansible.builtin.file:
    path: $HOME/.kube
    state: directory
    mode: '0750'

- name: copy config
  ansible.builtin.copy:
    src: "{{ playbook_dir }}/../kubespray/inventory/mycluster/artifacts/admin.conf"
    dest: $HOME/.kube/config-mycluster.conf

- name: setup path to kubernetes config persistently
  ansible.builtin.blockinfile:
    path: $HOME/.config/fish/conf.d/kubectl.fish
    block: |
      # Path to mycluster kubernetes config.
      set -x KUBECONFIG "$HOME/.kube/config-mycluster.conf"
    create: yes
