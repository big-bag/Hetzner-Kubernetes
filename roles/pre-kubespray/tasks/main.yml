---
- name: synchronize and initialize kubespray submodule
  ansible.builtin.shell:
    cmd: |
      git submodule sync
      git submodule update --init
  args:
    chdir: "{{ playbook_dir }}"
  changed_when: false

- name: add original kubespray repo as upstream
  ansible.builtin.command:
    cmd: git remote add upstream https://github.com/kubernetes-sigs/kubespray.git
  args:
    chdir: "{{ playbook_dir }}/submodules/kubespray/"
  failed_when: false
  changed_when: false

- name: sync master and active branches with upstream
  ansible.builtin.shell:
    cmd: |
      git checkout master
      git fetch upstream

      expect << EOF
        spawn git push origin refs/remotes/upstream/{{ item }}:refs/heads/{{ item }}

        expect "Username for 'https://github.com':"
        send "{{ github_username }}\n"

        expect "Password for 'https://{{ github_username }}@github.com':"
        send "{{ github_password }}\n"

        expect eof
      EOF
  args:
    chdir: "{{ playbook_dir }}/submodules/kubespray/"
  loop:
    - master
    - release-2.15
    - release-2.14
    - release-2.13
  changed_when: false

- name: switch to appropriate branch
  ansible.builtin.command:
    cmd: git submodule update --remote
  args:
    chdir: "{{ playbook_dir }}"
  changed_when: false

- name: install dependencies
  ansible.builtin.pip:
    name:
      - cryptography
      - jinja2
      - netaddr
      - pbr
      - jmespath
      - ruamel.yaml
    executable: pip3

- name: copy configs
  ansible.builtin.copy:
    src: submodules/kubespray/inventory/sample/group_vars
    dest: inventory
    remote_src: yes
    force: no

- name: build inventory
  ansible.builtin.template:
    src: hosts.yml.j2
    dest: inventory/hosts.yml
  notify: define tag to run kubespray play

- name: configure downloading kubectl onto localhost
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-cluster.yml
    regexp: '^# kubectl_localhost: false$'
    replace: 'kubectl_localhost: true'
  notify: define tag to run kubespray play

- name: configure copying of kubeconfig on localhost
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-cluster.yml
    regexp: '^# kubeconfig_localhost: false$'
    replace: 'kubeconfig_localhost: true'
  notify: define tag to run kubespray play

- name: create a directory for artifacts
  ansible.builtin.file:
    path: inventory/artifacts
    state: directory
    mode: '0750'

- name: gather facts from hcloud servers
  ansible.builtin.setup:
  delegate_to: "{{ item }}"
  delegate_facts: true
  loop: "{{ groups['hcloud'] }}"

- name: add host to group 'kube-master'
  ansible.builtin.add_host:
    name: "{{ item.name }}"
    groups: kube-master
  when: "'kube-master' in {{ item.group }}"
  loop: "{{ servers }}"
  changed_when: false

- name: set list of the ip addresses of the controller nodes (1/2)
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-cluster.yml
    regexp: 'supplementary_addresses_in_ssl_keys: \[.*\]'
    replace: "supplementary_addresses_in_ssl_keys: [{{ groups['kube-master'] | map('extract', hostvars, ['ipv4']) | join(', ') }}]"
  notify: define tag to run kubespray play

- name: set list of the ip addresses of the controller nodes (2/2)
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-cluster.yml
    regexp: '# (supplementary_addresses_in_ssl_keys: \[.*\])'
    replace: '\1'
  notify: define tag to run kubespray play

- name: configure iptables backend for calico cni
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-net-calico.yml
    regexp: '^# calico_iptables_backend: "Legacy"$'
    replace: 'calico_iptables_backend: "NFT"'
  notify: define tag to run kubespray play

- name: configure calico mtu
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/k8s-net-calico.yml
    regexp: '^# calico_mtu: 1500$'
    replace: 'calico_mtu: 1430'
  notify: define tag to run kubespray play

- name: enable kubernetes dashboard
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/addons.yml
    regexp: '# (dashboard_enabled: true)'
    replace: '\1'
  notify: define tag to run kubespray play

- name: configure namespace for kubernetes dashboard
  ansible.builtin.lineinfile:
    path: inventory/group_vars/k8s-cluster/addons.yml
    insertafter: '^dashboard_enabled: true$'
    line: 'dashboard_namespace: kubernetes-dashboard'

- name: enable the metrics server
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/addons.yml
    regexp: '^metrics_server_enabled: false$'
    replace: 'metrics_server_enabled: true'
  notify: define tag to run kubespray play

- name: setting cephfs provisioner monitors list (1/2)
  ansible.builtin.set_fact:
    cephfs_monitors: |
      {% set comma = joiner(':6789,') %}
      {% for srv in servers %}
      {% if 'kube-master' in srv.group %}
      {{ comma() }}{{ srv.ip }}
      {% endif %}
      {% endfor %}

- name: setting cephfs provisioner monitors list (2/2)
  ansible.builtin.set_fact:
    cephfs_monitors: "{{ cephfs_monitors | replace(\"\n\",\"\") + ':6789' }}"

- name: configure cephfs provisioner (1/3)
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/addons.yml
    regexp: '^cephfs_provisioner_enabled: false$'
    replace: 'cephfs_provisioner_enabled: true'
  notify: define tag to run kubespray play

- name: configure cephfs provisioner (2/3)
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/addons.yml
    regexp: 'cephfs_provisioner_monitors: ".*"'
    replace: "cephfs_provisioner_monitors: \"{{ cephfs_monitors }}\""
  notify: define tag to run kubespray play

- name: configure cephfs provisioner (3/3)
  ansible.builtin.replace:
    path: inventory/group_vars/k8s-cluster/addons.yml
    regexp: '# (cephfs_provisioner_monitors: ".*")'
    replace: '\1'
  notify: define tag to run kubespray play

- name: refresh inventory to ensure new instances exist in inventory
  ansible.builtin.meta: refresh_inventory

- name: define variables to connect to server(-s)
  ansible.builtin.set_fact:
    port: "{{ ssh_port }}"
    user: "{{ users | json_query('[*].name') | first }}"
