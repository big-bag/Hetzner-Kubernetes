---
# ------------------- artifacts ------------------- #
- name: determine uid of local user from which ansible is running
  ansible.builtin.command:
    cmd: id -u
  register: uid
  changed_when: false

- name: determine gid of local user from which ansible is running
  ansible.builtin.command:
    cmd: id -g
  register: gid
  changed_when: false

- name: change owner of downloaded artifacts
  ansible.builtin.file:
    path: inventory/artifacts
    owner: "{{ uid.stdout }}"
    group: "{{ gid.stdout }}"
    recurse: yes
  become: yes

- name: change controller host name to use the controller's public ip
  ansible.builtin.replace:
    path: inventory/artifacts/admin.conf
    regexp: 'https:\/\/.*:6443'
    replace: "https://{{ hostvars[groups['kube-master'][0]]['ipv4'] }}:6443"

- name: copy config
  ansible.builtin.copy:
    src: inventory/artifacts/admin.conf
    dest: $HOME/.kube/config-mycluster.conf
    mode: '0400'

- name: setup path to kubernetes config persistently
  ansible.builtin.blockinfile:
    path: $HOME/.config/fish/conf.d/kubectl.fish
    block: |
      # Path to mycluster kubernetes config.
      set -x KUBECONFIG "$HOME/.kube/config-mycluster.conf"
    create: yes

# ------------------- kubernetes version ------------------- #
- name: check installed version (1/2)
  ansible.builtin.shell:
    cmd: kubectl version | grep "Server Version" | awk -F "Major:\"" '{print$2}' | awk -F "\"" '{print$1}'
  register: major_version
  changed_when: false

- name: check installed version (2/2)
  ansible.builtin.shell:
    cmd: kubectl version | grep "Server Version" | awk -F "Minor:\"" '{print$2}' | awk -F "\"" '{print$1}'
  register: minor_version
  changed_when: false

# ------------------- csi-driver ------------------- #
- name: create a secret containing the token, fail on validation errors
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'csi-driver/secret.yml') | from_yaml }}"
    validate:
      fail_on_error: yes

- name: define deployment file
  ansible.builtin.set_fact:
    deployment_file: https://raw.githubusercontent.com/hetznercloud/csi-driver/master/deploy/kubernetes/hcloud-csi.yml
  when: "'{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.21' or
         '{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.20'"

- name: define deployment file
  ansible.builtin.set_fact:
    deployment_file: https://raw.githubusercontent.com/hetznercloud/csi-driver/v1.5.1/deploy/kubernetes/hcloud-csi.yml
  when: "'{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.19'"

- name: deploy the csi driver
  community.kubernetes.k8s:
    definition: "{{ item }}"
    validate:
      fail_on_error: yes
  loop: "{{ lookup('url', '{{ deployment_file }}', split_lines=False) | from_yaml_all | list }}"
  when: item is not none

# ------------------- integration tools ------------------- #
- name: create a secret containing hetzner cloud api token
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'integration-tools/secret.yml') | from_yaml }}"
    validate:
      fail_on_error: yes

- name: define deployment file
  ansible.builtin.set_fact:
    deployment_file: https://github.com/hetznercloud/hcloud-cloud-controller-manager/releases/latest/download/ccm.yaml
  when: "'{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.21' or
         '{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.20'"

- name: define deployment file
  ansible.builtin.set_fact:
    deployment_file: https://raw.githubusercontent.com/hetznercloud/hcloud-cloud-controller-manager/v1.8.1/deploy/ccm.yaml
  when: "'{{ major_version.stdout }}.{{ minor_version.stdout }}' == '1.19'"

- name: integrate kubernetes cluster with the hetzner cloud api
  community.kubernetes.k8s:
    definition: "{{ item }}"
    validate:
      fail_on_error: yes
  loop: "{{ lookup('url', '{{ deployment_file }}', split_lines=False) | from_yaml_all | list }}"
  when: item is not none

# ------------------- cert manager ------------------- #
- name: create a secret containing cloudflare api token
  community.kubernetes.k8s:
    definition: "{{ lookup('template', 'cert-manager/secret.yml') | from_yaml }}"
    validate:
      fail_on_error: yes

- name: create an acme issuer
  community.kubernetes.k8s:
    src: "{{ role_path }}/templates/cert-manager/issuer.yml"

# ------------------- kubernetes dashboard ------------------- #
- name: create an ingress resource to access kubernetes dashboard
  community.kubernetes.k8s:
    definition: "{{ item }}"
    validate:
      fail_on_error: yes
  loop: "{{ lookup('template', 'ingress-nginx/kubernetes-dashboard.yml', split_lines=False) | from_yaml_all | list }}"
  when: item is not none
