---
- name: collect facts
  ansible.builtin.setup:

- name: read created file to configure secret key as one-time password and save emergency scratch codes
  ansible.builtin.command:
    argv:
      - cat
      - /home/{{ item.name }}/.google_authenticator
  loop: "{{ users }}"
  register: two_fa_codes
  changed_when: false
  no_log: true

- name: check installed cli version
  ansible.builtin.command:
    argv:
      - op
      - --version
  delegate_to: localhost
  register: op_version
  changed_when: false
  ignore_errors: true

- name: if the tool isn't installed, then set the version to zero; otherwise, set the current version
  ansible.builtin.set_fact:
    installed_version: "{% if op_version.failed %}0{% else %}{{ op_version.stdout }}{% endif %}"

- name: download the tool
  ansible.builtin.unarchive:
    src: https://cache.agilebits.com/dist/1P/op/pkg/v{{ one_password_cli_version }}/op_linux_amd64_v{{ one_password_cli_version }}.zip
    dest: /usr/local/bin
    remote_src: yes
  when: "'{{ one_password_cli_version }}' != '{{ installed_version }}'"
  delegate_to: localhost

- name: delete .sig file included in the download
  ansible.builtin.file:
    path: /usr/local/bin/op.sig
    state: absent
  delegate_to: localhost

- name: sign in to an account
  shell: |
    export OP_DEVICE="{{ one_password_device_id }}"
    echo "{{ one_password_master_password }}" | op signin "{{ one_password_subdomain }}.1password.com" "{{ one_password_email_address }}" "{{ one_password_secret_key }}" --raw
  delegate_to: localhost
  become: no
  register: op_session_token
  changed_when: false

- name: check that vault created
  shell: |
    export "OP_SESSION_{{ one_password_subdomain }}"="{{ op_session_token.stdout }}"
    op get vault "{{ one_password_vault_name }}"
  delegate_to: localhost
  become: no
  ignore_errors: true
  register: vault_created
  changed_when: false

- name: create vault
  shell: |
    export "OP_SESSION_{{ one_password_subdomain }}"="{{ op_session_token.stdout }}"
    op create vault "{{ one_password_vault_name }}"
  delegate_to: localhost
  become: no
  when: vault_created.rc != 0

- name: check that item(-s) and user section(-s) created
  community.general.onepassword_info:
    auto_login:
      master_password: "{{ one_password_master_password }}"
      subdomain: "{{ one_password_subdomain }}"
      username: "{{ one_password_email_address }}"
      secret_key: "{{ one_password_secret_key }}"
    search_terms:
      - vault: "{{ one_password_vault_name }}"
        name: "{{ item.0.name }}"
        section: user details - {{ item.1.name }}
  environment:
    OP_DEVICE: "{{ one_password_device_id }}"
  loop: "{{ servers|product(users)|list }}"
  delegate_to: localhost
  become: no
  ignore_errors: true
  register: item_or_section_created
  run_once: true
  no_log: true

- name: create a local temporary folder
  ansible.builtin.file:
    path: "/tmp/ansible.{{ lookup('password', '/dev/null chars=ascii_lowercase,digits length=8') }}"
    state: directory
  delegate_to: localhost
  become: no
  register: tempdir
  run_once: true
  when: item_or_section_created.results.{{ item }}.failed
  loop: "{{ range(0, ((servers|length)*(users|length)-1) +1) | list }}"

- name: (re-)create item(-s) in vault
  block:
    - name: delete item(-s)
      shell: |
        export "OP_SESSION_{{ one_password_subdomain }}"="{{ op_session_token.stdout }}"
        op delete item "{{ item.name }}" --vault "{{ one_password_vault_name }}"
      loop: "{{ servers }}"
      ignore_errors: true
      no_log: true

    - name: render config
      ansible.builtin.template:
        src: server.json.j2
        dest: "{{ tempdir['results'] | json_query('[*].path') | first }}/{{ item }}-server.json"
      loop: "{{ groups['hcloud'] }}"

    - name: create an item with a template in vault
      shell: |
        export "OP_SESSION_{{ one_password_subdomain }}"="{{ op_session_token.stdout }}"
        op create item "Server" --title "{{ item.name }}" "$( op encode < {{ tempdir['results'] | json_query('[*].path') | first }}/{{ item.name }}-server.json )" --vault "{{ one_password_vault_name }}"
        sleep 2
      loop: "{{ servers }}"
  delegate_to: localhost
  become: no
  run_once: true
  when: tempdir.changed

- name: delete a local temporary folder
  ansible.builtin.file:
    path: "{{ tempdir['results'][item]['path'] }}"
    state: absent
  when: "{{ tempdir['results'][item]['path'] is defined }}"
  loop: "{{ range(0, ((servers|length)*(users|length)-1) +1) | list }}"
  delegate_to: localhost
  become: no
  run_once: true
  changed_when: false

- name: sign out from an account (1/2)
  shell: op signout --forget
  delegate_to: localhost
  become: no
  changed_when: false

- name: sign out from an account (2/2)
  ansible.builtin.file:
    path: $HOME/.config/op/config
    state: absent
  delegate_to: localhost
  become: no
  changed_when: false
